name: Build

on: [push]

jobs:

    build:

        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: [3.8]

        steps:
            - uses: actions/checkout@v2

            - name: Install Python
              uses: actions/setup-python@v2
              with:
                python-version: ${{ matrix.python-version }}

            - name: Install pipenv
              run: |
                python -m pip install --upgrade pipenv wheel

            - id: cache-pipenv
              uses: actions/cache@v1
              with:
                path: ~/.local/share/virtualenvs
                key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

            - name: Install dependencies
              if: steps.cache-pipenv.outputs.cache-hit != 'true'
              run: |
                pipenv install --deploy --dev

            - name: Run tests
              run: |
                make clean test coverage

            - name: Upload pytest test results
              uses: actions/upload-artifact@v1
              with:
                name: pytest-results-${{ matrix.python-version }}
                path: coverage.xml
              # Use always() to always run this step to publish test results when there are test failures
              if: ${{ always() }}

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v1
              with:
                token: ${{ secrets.CODECOV_TOKEN }}
                file: ./coverage.xml
                flags: unittests
                env_vars: OS,PYTHON
                name: codecov-umbrella
                fail_ci_if_error: true
            
            - name: Upload coverage to Codacy
              uses: codacy/codacy-coverage-reporter-action@master
              with:
                project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
                coverage-reports: ./coverage.xml

            - name: Run build
              run: |
                make clean build

#            - name: Publish distribution ðŸ“¦ to Test PyPI
#              uses: pypa/gh-action-pypi-publish@master
#              with:
#                password: ${{ secrets.TEST_PYPI_API_TOKEN }}
#                repository_url: https://test.pypi.org/legacy/

            - name: Publish distribution ðŸ“¦ to PyPI
              if: startsWith(github.ref, 'refs/tags')
              uses: pypa/gh-action-pypi-publish@master
              with:
                password: ${{ secrets.PYPI_API_TOKEN }}
